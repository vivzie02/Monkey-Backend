/*
 * Index Card API
 *
 * This is a simple server for loading and saving index cards
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Newtonsoft.Json;
using System;
using System.Runtime.Serialization;
using System.Text;

namespace IO.Swagger.DTOs
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class BookDTO : IEquatable<BookDTO>
    {
        /// <summary>
        /// Gets or Sets Content
        /// </summary>

        [DataMember(Name = "content")]
        public string Content { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfWords
        /// </summary>

        [DataMember(Name = "numberOfWords")]
        public int NumberOfWords { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BooksBody {\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  NumberOfWords: ").Append(NumberOfWords).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BookDTO)obj);
        }

        /// <summary>
        /// Returns true if BooksBody instances are equal
        /// </summary>
        /// <param name="other">Instance of BooksBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BookDTO other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Content == other.Content ||
                    Content != null &&
                    Content.Equals(other.Content)
                ) &&
                (
                    NumberOfWords == other.NumberOfWords ||
                    NumberOfWords.Equals(other.NumberOfWords)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Content != null)
                    hashCode = hashCode * 59 + Content.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(BookDTO left, BookDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BookDTO left, BookDTO right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
