/*
 * Book API
 *
 * This is a simple server for loading and saving random books
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using IO.Swagger.Attributes;
using IO.Swagger.DTOs;
using IO.Swagger.Services;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.AspNetCore.Annotations;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace IO.Swagger.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class BooksApiController : ControllerBase
    {
        private readonly IBookService _bookService;

        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="bookService"></param>
        public BooksApiController(IBookService bookService)
        {
            _bookService = bookService;
        }

        /// <summary>
        /// Get longest books
        /// </summary>
        /// <response code="200">sucessfully got books by length</response>
        [HttpGet]
        [Route("/v1/books")]
        [Consumes("application/json")]
        [Produces("application/json")]
        [ValidateModelState]
        [SwaggerOperation("BooksGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<BookDTO>), description: "sucessfully got books by length")]
        public virtual IActionResult BooksGet()
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Object>));
            string exampleJson = null;
            exampleJson = "[ \"\", \"\" ]";

            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Object>>(exampleJson)
            : default(List<Object>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create a new book
        /// </summary>
        /// <param name="body"></param>
        /// <response code="201">Successfully created new book</response>
        /// <response code="500">Internal Server Error</response>
        [HttpPost]
        [Route("/v1/books")]
        [Consumes("application/json")]
        [ProducesResponseType(201)]
        [ProducesResponseType(500)]
        [ValidateModelState]
        [SwaggerOperation("BooksPost")]
        public async virtual Task<IActionResult> BooksPost([FromBody] BookDTO body)
        {
            var response = await _bookService.SaveBook(body).ConfigureAwait(false);

            if(response == null)
            {
                return Problem();
            }

            return Ok(response);
        }
    }
}
